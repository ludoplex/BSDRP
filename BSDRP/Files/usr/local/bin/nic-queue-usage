#!/usr/bin/env python
# vim: sta:et:sw=4:ts=4:sts=4
# -*- coding: utf-8 -*-
# Alexander V. Chernikov's script for displaying NIC queue usage/rate
# Improved by BSDRP team

from __future__ import division
import re
import sys
import subprocess
import time

if len(sys.argv) < 2:
    print(f"Usage: {sys.argv[0]} interface")
    print("       with interface as bxe,cc,cxl,ix,ixl,igb,mce,mlxen or oce")
    sys.exit(1)


def read_nic(name):
    " Parse sysctl value for each queues of the NIC "
    " rx and tx for each queue "
    " rx and tx for each NIC (to compare with the sum of rx|tx of each queue) "
    m = re.match(r'^(bxe|cc|cxl|ix|ixl|igb|mce|mlxen|oce)(\d+)$', name)
    if not m:
        raise Exception(f'Invalid nic name: {name}')
    driver = m[1]
    rxq = {}
    txq = {}
    agg = {}
    if driver == "mlxen":
        for line in subprocess.check_output(f"/sbin/sysctl hw.{m[1]}{m[2]}".split(), universal_newlines=True).split("\n"):
            # hw.mlxen0.stat.rx_ring1.packets
            # hw.mlxen0.stat.tx_ring4.packets
            # hw.mlxen0.stat.tx_packets
            # hw.mlxen0.stat.rx_packets:
            m = re.match(r'.*\.stat.tx_ring(\d+)\.packets:\s+(\d+)', line)
            if m:
                txq[m[1]] = int(m[2])
            m = re.match(r'.*\.stat.rx_ring(\d+)\.packets:\s+(\d+)', line)
            if m:
                rxq[m[1]] = int(m[2])
            m = re.match(r'.*\.stat.rx_packets:\s+(\d+)', line)
            if m:
                agg['rx_sum'] = int(m[1])
            m = re.match(r'.*\.stat.tx_packets:\s+(\d+)', line)
            if m:
                agg['tx_sum'] = int(m[1])
    else:
        for line in subprocess.check_output(f"/sbin/sysctl dev.{m[1]}.{m[2]}".split(), universal_newlines=True).split("\n"):
            # XXX: number of RXQ can be different than TXQ
            # dev.cxl.0.rxq.1.rxcsum
            # dev.cxl.1.txq.1.txpkt_wrs: 714494990
            # dev.cxl.0.stats.rx_frames
            # dev.cxl.0.stats.tx_frames
            # dev.ix.0.queue0.rx_packets: 45256216
            # dev.ix.0.queue0.tx_packets: 5
            # dev.ix.0.total_pkts_rcvd
            # dev.ix.0.total_pkts_txd
            # dev.ixl.1.pf.que1.tx_packets
            # dev.ixl.1.pf.que1.rx_packets
            # dev.ixl.0.mac.bcast_pkts_txd: 1
            # dev.ixl.0.mac.mcast_pkts_txd: 5
            # dev.ixl.0.mac.ucast_pkts_txd: 0
            # dev.ixl.0.mac.bcast_pkts_rcvd: 0
            # dev.ixl.0.mac.mcast_pkts_rcvd: 0
            # dev.ixl.0.mac.ucast_pkts_rcvd: 0
            # dev.igb.1.mac_stats.total_pkts_recvd
            # dev.igb.1.mac_stats.total_pkts_txd
            # dev.bxe.3.queue.0.rx_pkts
            # dev.bxe.3.queue.0.tx_pkts
            # dev.bxe.3.rx_bcast_packets: 1447
            # dev.bxe.3.rx_mcast_packets: 0
            # dev.bxe.3.rx_ucast_packets: 1524243
            # dev.oce.0.stats.rx.queue3.rx_pkts: 0
            # dev.oce.0.stats.tx.queue3.tx_pkts: 0
            # dev.oce.0.stats.rx.total_pkts:
            # dev.mce.0.rxstat0.packets: 64563591
            # dev.mce.0.txstat0tc0.packets
            # dev.mce.0.pstats.frames_rx

            if driver == "bxe":
                m = re.match(r'.*\.queue.(\d+)\.tx_pkts:\s+(\d+)', line)
            elif driver in ("cc", "cxl"):
                m = re.match(r'.*\.txq\.(\d+)\.txpkt_wrs:\s+(\d+)', line)
            elif driver in ("ix", "igb"):
                m = re.match(r'.*\.queue(\d+)\.tx_packets:\s+(\d+)', line)
            elif driver == "ixl":
                m = re.match(r'.*\.pf.que(\d+)\.tx_packets:\s+(\d+)', line)
            elif driver == "mce":
                m = re.match(r'.*\.txstat(\d+)tc0\.packets:\s+(\d+)', line)
            elif driver == "oce":
                m = re.match(r'.*\.stats.tx.queue(\d+)\.tx_pkts:\s+(\d+)', line)
            if m:
                txq[m[1]] = int(m[2])
            if driver == "bxe":
                m = re.match(r'.*\.queue.(\d+)\.rx_pkts:\s+(\d+)', line)
            elif driver in ("cc", "cxl"):
                m = re.match(r'.*\.rxq\.(\d+)\.rxcsum:\s+(\d+)', line)
            elif driver in ("ix", "igb"):
                m = re.match(r'.*\.queue(\d+)\.rx_packets:\s+(\d+)', line)
            elif driver == "ixl":
                m = re.match(r'.*\.pf.que(\d+)\.rx_packets:\s+(\d+)', line)
            elif driver == "mce":
                m = re.match(r'.*\.rxstat(\d+)\.packets:\s+(\d+)', line)
            elif driver == "oce":
                m = re.match(r'.*\.stats.rx.queue(\d+)\.rx_pkts:\s+(\d+)', line)
            if m:
                rxq[m[1]] = int(m[2])
            if driver == "bxe":
                # To do: aggregate bcast/mcast and ucast
                m = re.match(r'.*\.rx_ucast_packets:\s+(\d+)', line)
            elif driver in ("cc", "cxl"):
                m = re.match(r'.*\.stats.rx_frames:\s+(\d+)', line)
            elif driver == "igb":
                m = re.match(r'.*\.total_pkts_recvd:\s+(\d+)', line)
            elif driver == "ix":
                m = re.match(r'.*\.total_pkts_rcvd:\s+(\d+)', line)
            elif driver == "ixl":
                # To do: aggregate bcas/mcast and ucast
                m = re.match(r'.*\.mac.ucast_pkts_rcvd:\s+(\d+)', line)
            elif driver == "mce":
                m = re.match(r'.*\.pstats.frames_rx:\s+(\d+)', line)
            elif driver == "oce":
                m = re.match(r'.*\.stats.rx.total_pkts:\s+(\d+)', line)
            if m:
                agg['rx_sum'] = int(m[1])
            if driver == "bxe":
                # To do: aggregate bcast/mcast and ucast
                m = re.match(r'.*\.tx_ucast_packets:\s+(\d+)', line)
            if driver in ("ix", "igb"):
                m = re.match(r'.*\.total_pkts_txd:\s+(\d+)', line)
            elif driver == "ixl":
                m = re.match(r'.*\.mac.ucast_pkts_txd:\s+(\d+)', line)
            elif driver in ("cc", "cxl"):
                m = re.match(r'.*\.stats.tx_frames:\s+(\d+)', line)
            elif driver == "mce":
                m = re.match(r'.*\.pstats.frames_tx:\s+(\d+)', line)
            elif driver == "oce":
                m = re.match(r'.*\.stats.tx.total_tx_pkts:\s+(\d+)', line)
            if m:
                agg['tx_sum'] = int(m[1])
    return [rxq, txq, agg]


def make_diff(old_ret, new_ret):
    " Doing diff between previous value and new one "
    rxq = {}
    txq = {}
    for i in old_ret[0]:
        rxq[i] = new_ret[0][i] - old_ret[0][i]
        txq[i] = new_ret[1][i] - old_ret[1][i]

    agg = {i: new_ret[2][i] - old_ret[2][i] for i in old_ret[2]}
    return [rxq, txq, agg]


def print_diff(diff):
    " Displaying the diff between previous value and new one "
    rxline = ""
    txline = ""
    rx_sum = 0
    tx_sum = 0
    for i in range(len(diff[0])):
        val = str(i)
        rx_val = int(diff[0][val])
        tx_val = int(diff[1][val])
        rx_sum += rx_val
        tx_sum += tx_val
        rxline += "r{0} {1:5d}K/s ".format(val, rx_val // 1000)
        txline += "t{0} {1:5d}K/s ".format(val, tx_val // 1000)
    rxline += "r{0} {1:5d}K/s [{2:5d}K/s]".format("T", rx_sum // 1000,
                                                  diff[2]['rx_sum'] // 1000)
    txline += "t{0} {1:5d}K/s [{2:5d}K/s]".format("T", tx_sum // 1000,
                                                  diff[2]['tx_sum'] // 1000)

    print(rxline)
    print(txline)
    print("")


def run_nic(name):
    " Main loop function "
    ret = []
    while True:
        ret_new = read_nic(name)
        if not ret:
            ret = ret_new
            time.sleep(1)
            continue

        diff = make_diff(ret, ret_new)
        ret = ret_new
        print_diff(diff)
        time.sleep(1)


run_nic(sys.argv[1])
